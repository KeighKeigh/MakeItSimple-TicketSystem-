// <auto-generated />
using System;
using MakeItSimple.WebApi.DataAccessLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MakeItSimple.WebApi.Migrations
{
    [DbContext(typeof(MisDbContext))]
    [Migration("20240202075336_addticketApprover")]
    partial class addticketApprover
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.AccountTitleSetup.AccountTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("AccountCode")
                        .HasColumnType("longtext")
                        .HasColumnName("account_code");

                    b.Property<int>("AccountNo")
                        .HasColumnType("int")
                        .HasColumnName("account_no");

                    b.Property<string>("AccountTitles")
                        .HasColumnType("longtext")
                        .HasColumnName("account_titles");

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime>("SyncDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("sync_date");

                    b.Property<string>("SyncStatus")
                        .HasColumnType("longtext")
                        .HasColumnName("sync_status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_account_titles");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_account_titles_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_account_titles_modified_by");

                    b.ToTable("account_titles", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.ApproverSetup.Approver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("added_by");

                    b.Property<int?>("ApproverLevel")
                        .HasColumnType("int")
                        .HasColumnName("approver_level");

                    b.Property<int>("ChannelId")
                        .HasColumnType("int")
                        .HasColumnName("channel_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_approvers");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_approvers_added_by");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("ix_approvers_channel_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_approvers_modified_by");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_approvers_user_id");

                    b.ToTable("approvers", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.CategorySetup.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("added_by");

                    b.Property<string>("CategoryDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("category_description");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_categories_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_categories_modified_by");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.ChannelSetup.Channel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("added_by");

                    b.Property<string>("ChannelName")
                        .HasColumnType("longtext")
                        .HasColumnName("channel_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("modified_by");

                    b.Property<int>("SubUnitId")
                        .HasColumnType("int")
                        .HasColumnName("sub_unit_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_channels");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_channels_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_channels_modified_by");

                    b.HasIndex("SubUnitId")
                        .HasDatabaseName("ix_channels_sub_unit_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_channels_user_id");

                    b.ToTable("channels", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.ChannelUserSetup.ChannelUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ChannelId")
                        .HasColumnType("int")
                        .HasColumnName("channel_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_channel_users");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("ix_channel_users_channel_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_channel_users_user_id");

                    b.ToTable("channel_users", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.CompanySetup.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("added_by");

                    b.Property<string>("CompanyCode")
                        .HasColumnType("longtext")
                        .HasColumnName("company_code");

                    b.Property<string>("CompanyName")
                        .HasColumnType("longtext")
                        .HasColumnName("company_name");

                    b.Property<int>("CompanyNo")
                        .HasColumnType("int")
                        .HasColumnName("company_no");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime>("SyncDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("sync_date");

                    b.Property<string>("SyncStatus")
                        .HasColumnType("longtext")
                        .HasColumnName("sync_status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_companies");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_companies_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_companies_modified_by");

                    b.ToTable("companies", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.DepartmentSetup.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("DepartmentCode")
                        .HasColumnType("longtext")
                        .HasColumnName("department_code");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("longtext")
                        .HasColumnName("department_name");

                    b.Property<int>("DepartmentNo")
                        .HasColumnType("int")
                        .HasColumnName("department_no");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime>("SyncDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("sync_date");

                    b.Property<string>("SyncStatus")
                        .HasColumnType("longtext")
                        .HasColumnName("sync_status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_departments");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_departments_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_departments_modified_by");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.LocationSetup.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("LocationCode")
                        .HasColumnType("longtext")
                        .HasColumnName("location_code");

                    b.Property<string>("LocationName")
                        .HasColumnType("longtext")
                        .HasColumnName("location_name");

                    b.Property<int>("LocationNo")
                        .HasColumnType("int")
                        .HasColumnName("location_no");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime>("SyncDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("sync_date");

                    b.Property<string>("SyncStatus")
                        .HasColumnType("longtext")
                        .HasColumnName("sync_status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_locations");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_locations_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_locations_modified_by");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.SubCategorySetup.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("added_by");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("modified_by");

                    b.Property<string>("SubCategoryDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("sub_category_description");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_sub_categories");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_sub_categories_added_by");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_sub_categories_category_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_sub_categories_modified_by");

                    b.ToTable("sub_categories", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.SubUnitSetup.SubUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("modified_by");

                    b.Property<string>("SubUnitCode")
                        .HasColumnType("longtext")
                        .HasColumnName("sub_unit_code");

                    b.Property<string>("SubUnitName")
                        .HasColumnType("longtext")
                        .HasColumnName("sub_unit_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_sub_units");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_sub_units_added_by");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_sub_units_department_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_sub_units_modified_by");

                    b.ToTable("sub_units", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.ApproverTicketing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("added_by");

                    b.Property<int?>("ApproverLevel")
                        .HasColumnType("int")
                        .HasColumnName("approver_level");

                    b.Property<int>("ChannelId")
                        .HasColumnType("int")
                        .HasColumnName("channel_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int?>("CurrentLevel")
                        .HasColumnType("int")
                        .HasColumnName("current_level");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsApprove")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_approve");

                    b.Property<int?>("RequestGeneratorId")
                        .HasColumnType("int")
                        .HasColumnName("request_generator_id");

                    b.Property<string>("Status")
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_approver_ticketings");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_approver_ticketings_added_by");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("ix_approver_ticketings_channel_id");

                    b.HasIndex("RequestGeneratorId")
                        .HasDatabaseName("ix_approver_ticketings_request_generator_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_approver_ticketings_user_id");

                    b.ToTable("approver_ticketings", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.ClosingGenerator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_closing_generators");

                    b.ToTable("closing_generators", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.ClosingTAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("added_by");

                    b.Property<string>("ClosingAttachment")
                        .HasColumnType("longtext")
                        .HasColumnName("closing_attachment");

                    b.Property<int?>("ClosingGeneratorId")
                        .HasColumnType("int")
                        .HasColumnName("closing_generator_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_closing_t_attachments");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_closing_t_attachments_added_by");

                    b.HasIndex("ClosingGeneratorId")
                        .HasDatabaseName("ix_closing_t_attachments_closing_generator_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_closing_t_attachments_modified_by");

                    b.ToTable("closing_t_attachments", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.RequestGenerator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_request_generators");

                    b.ToTable("request_generators", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("added_by");

                    b.Property<string>("Attachment")
                        .HasColumnType("longtext")
                        .HasColumnName("attachment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("modified_by");

                    b.Property<int?>("RequestGeneratorId")
                        .HasColumnType("int")
                        .HasColumnName("request_generator_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_ticket_attachments");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_ticket_attachments_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_ticket_attachments_modified_by");

                    b.HasIndex("RequestGeneratorId")
                        .HasDatabaseName("ix_ticket_attachments_request_generator_id");

                    b.ToTable("ticket_attachments", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketConcern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("added_by");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("approved_at");

                    b.Property<Guid?>("ApprovedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("approved_by");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<int>("ChannelId")
                        .HasColumnType("int")
                        .HasColumnName("channel_id");

                    b.Property<Guid?>("ClosedApproveBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("closed_approve_by");

                    b.Property<DateTime?>("Closed_At")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("closed_at");

                    b.Property<int?>("ClosingGeneratorId")
                        .HasColumnType("int")
                        .HasColumnName("closing_generator_id");

                    b.Property<string>("ConcernDetails")
                        .HasColumnType("longtext")
                        .HasColumnName("concern_details");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsApprove")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_approve");

                    b.Property<bool?>("IsClosedApprove")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_closed_approve");

                    b.Property<bool>("IsClosedReject")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_closed_reject");

                    b.Property<bool?>("IsReTicket")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_re_ticket");

                    b.Property<bool>("IsReject")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_reject");

                    b.Property<bool?>("IsTransfer")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_transfer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("modified_by");

                    b.Property<string>("Remarks")
                        .HasColumnType("longtext")
                        .HasColumnName("remarks");

                    b.Property<int?>("RequestGeneratorId")
                        .HasColumnType("int")
                        .HasColumnName("request_generator_id");

                    b.Property<DateTime?>("ReticketAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("reticket_at");

                    b.Property<Guid?>("ReticketBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("reticket_by");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_date");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("sub_category_id");

                    b.Property<int>("SubUnitId")
                        .HasColumnType("int")
                        .HasColumnName("sub_unit_id");

                    b.Property<DateTime>("TargetDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("target_date");

                    b.Property<DateTime?>("TransferAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("transfer_at");

                    b.Property<Guid?>("TransferBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("transfer_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_ticket_concerns");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_ticket_concerns_added_by");

                    b.HasIndex("ApprovedBy")
                        .HasDatabaseName("ix_ticket_concerns_approved_by");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_ticket_concerns_category_id");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("ix_ticket_concerns_channel_id");

                    b.HasIndex("ClosedApproveBy")
                        .HasDatabaseName("ix_ticket_concerns_closed_approve_by");

                    b.HasIndex("ClosingGeneratorId")
                        .HasDatabaseName("ix_ticket_concerns_closing_generator_id");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_ticket_concerns_department_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_ticket_concerns_modified_by");

                    b.HasIndex("RequestGeneratorId")
                        .HasDatabaseName("ix_ticket_concerns_request_generator_id");

                    b.HasIndex("ReticketBy")
                        .HasDatabaseName("ix_ticket_concerns_reticket_by");

                    b.HasIndex("SubCategoryId")
                        .HasDatabaseName("ix_ticket_concerns_sub_category_id");

                    b.HasIndex("SubUnitId")
                        .HasDatabaseName("ix_ticket_concerns_sub_unit_id");

                    b.HasIndex("TransferBy")
                        .HasDatabaseName("ix_ticket_concerns_transfer_by");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_ticket_concerns_user_id");

                    b.ToTable("ticket_concerns", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TransferTicketConcern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("added_by");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<int>("ChannelId")
                        .HasColumnType("int")
                        .HasColumnName("channel_id");

                    b.Property<string>("ConcernDetails")
                        .HasColumnType("longtext")
                        .HasColumnName("concern_details");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsRejectTransfer")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_reject_transfer");

                    b.Property<bool?>("IsTransfer")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_transfer");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("RejectTransferAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("reject_transfer_at");

                    b.Property<Guid?>("RejectTransferBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("reject_transfer_by");

                    b.Property<int?>("RequestGeneratorId")
                        .HasColumnType("int")
                        .HasColumnName("request_generator_id");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_date");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("sub_category_id");

                    b.Property<int>("SubUnitId")
                        .HasColumnType("int")
                        .HasColumnName("sub_unit_id");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("target_date");

                    b.Property<Guid?>("TicketApprover")
                        .HasColumnType("char(36)")
                        .HasColumnName("ticket_approver");

                    b.Property<int>("TicketConcernId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_concern_id");

                    b.Property<DateTime?>("TransferAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("transfer_at");

                    b.Property<Guid?>("TransferBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("transfer_by");

                    b.Property<string>("TransferRemarks")
                        .HasColumnType("longtext")
                        .HasColumnName("transfer_remarks");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_transfer_ticket_concerns");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_transfer_ticket_concerns_added_by");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_transfer_ticket_concerns_category_id");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("ix_transfer_ticket_concerns_channel_id");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_transfer_ticket_concerns_department_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_transfer_ticket_concerns_modified_by");

                    b.HasIndex("RejectTransferBy")
                        .HasDatabaseName("ix_transfer_ticket_concerns_reject_transfer_by");

                    b.HasIndex("RequestGeneratorId")
                        .HasDatabaseName("ix_transfer_ticket_concerns_request_generator_id");

                    b.HasIndex("SubCategoryId")
                        .HasDatabaseName("ix_transfer_ticket_concerns_sub_category_id");

                    b.HasIndex("SubUnitId")
                        .HasDatabaseName("ix_transfer_ticket_concerns_sub_unit_id");

                    b.HasIndex("TicketConcernId")
                        .HasDatabaseName("ix_transfer_ticket_concerns_ticket_concern_id");

                    b.HasIndex("TransferBy")
                        .HasDatabaseName("ix_transfer_ticket_concerns_transfer_by");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_transfer_ticket_concerns_user_id");

                    b.ToTable("transfer_ticket_concerns", (string)null);
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("EmpId")
                        .HasColumnType("longtext")
                        .HasColumnName("emp_id");

                    b.Property<string>("Fullname")
                        .HasColumnType("longtext")
                        .HasColumnName("fullname");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsPasswordChange")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_password_change");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("modified_by");

                    b.Property<string>("Password")
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<int?>("SubUnitId")
                        .HasColumnType("int")
                        .HasColumnName("sub_unit_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int")
                        .HasColumnName("user_role_id");

                    b.Property<string>("Username")
                        .HasColumnType("longtext")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_users_added_by");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_users_department_id");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_users_modified_by");

                    b.HasIndex("SubUnitId")
                        .HasDatabaseName("ix_users_sub_unit_id");

                    b.HasIndex("UserRoleId")
                        .HasDatabaseName("ix_users_user_role_id");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bca9f29a-ccfb-4cd5-aa51-f3f61ea635d2"),
                            CreatedAt = new DateTime(2024, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            Fullname = "Admin",
                            IsActive = true,
                            IsPasswordChange = true,
                            Password = "$2a$12$ihvpKbpvdRfZLXz.tZKFEulxnTg1tiS11T/MbpufId3rzXoCMW2OK",
                            UserRoleId = 1,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.UserManagement.UserRoleAccount.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<Guid?>("AddedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("char(36)")
                        .HasColumnName("modified_by");

                    b.Property<string>("Permissions")
                        .HasColumnType("longtext")
                        .HasColumnName("permissions");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserRoleName")
                        .HasColumnType("longtext")
                        .HasColumnName("user_role_name");

                    b.HasKey("Id")
                        .HasName("pk_user_roles");

                    b.HasIndex("AddedBy")
                        .HasDatabaseName("ix_user_roles_added_by");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("ix_user_roles_modified_by");

                    b.ToTable("user_roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Permissions = "[\"User Management\",\"User Role\"]",
                            UserRoleName = "Admin"
                        });
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.AccountTitleSetup.AccountTitle", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_account_titles_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_account_titles_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.ApproverSetup.Approver", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_approvers_users_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.ChannelSetup.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_approvers_channels_channel_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_approvers_users_modified_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_approvers_users_user_id1");

                    b.Navigation("AddedByUser");

                    b.Navigation("Channel");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.CategorySetup.Category", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_categories_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_categories_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.ChannelSetup.Channel", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_channels_users_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_channels_users_modified_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.SubUnitSetup.SubUnit", "SubUnit")
                        .WithMany("Channels")
                        .HasForeignKey("SubUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_channels_sub_units_sub_unit_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_channels_users_user_id1");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("SubUnit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.ChannelUserSetup.ChannelUser", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.Setup.ChannelSetup.Channel", "Channel")
                        .WithMany("ChannelUsers")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_channel_users_channels_channel_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_channel_users_users_user_id");

                    b.Navigation("Channel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.CompanySetup.Company", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_companies_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_companies_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.DepartmentSetup.Department", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_departments_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_departments_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.LocationSetup.Location", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_locations_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_locations_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.SubCategorySetup.SubCategory", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_sub_categories_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.CategorySetup.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sub_categories_categories_category_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_sub_categories_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("Category");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.SubUnitSetup.SubUnit", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_sub_units_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.DepartmentSetup.Department", "Department")
                        .WithMany("SubUnits")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_sub_units_departments_department_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_sub_units_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("Department");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.ApproverTicketing", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_approver_ticketings_users_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.ChannelSetup.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_approver_ticketings_channels_channel_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.RequestGenerator", "RequestGenerator")
                        .WithMany("ApproverTicketings")
                        .HasForeignKey("RequestGeneratorId")
                        .HasConstraintName("fk_approver_ticketings_request_generators_request_generator_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_approver_ticketings_users_user_id1");

                    b.Navigation("AddedByUser");

                    b.Navigation("Channel");

                    b.Navigation("RequestGenerator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.ClosingTAttachment", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_closing_t_attachments_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.ClosingGenerator", "ClosingGenerator")
                        .WithMany("TicketAttachments")
                        .HasForeignKey("ClosingGeneratorId")
                        .HasConstraintName("fk_closing_t_attachments_closing_generators_closing_generator_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_closing_t_attachments_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ClosingGenerator");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketAttachment", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_attachments_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_attachments_users_modified_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.RequestGenerator", "RequestGenerator")
                        .WithMany("TicketAttachments")
                        .HasForeignKey("RequestGeneratorId")
                        .HasConstraintName("fk_ticket_attachments_request_generators_request_generator_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("RequestGenerator");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TicketConcern", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_concerns_users_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_concerns_users_approved_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.CategorySetup.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ticket_concerns_categories_category_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.ChannelSetup.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ticket_concerns_channels_channel_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ClosedApproveByUser")
                        .WithMany()
                        .HasForeignKey("ClosedApproveBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_concerns_users_closed_approve_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.ClosingGenerator", "ClosingGenerator")
                        .WithMany("TicketConcerns")
                        .HasForeignKey("ClosingGeneratorId")
                        .HasConstraintName("fk_ticket_concerns_closing_generators_closing_generator_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.DepartmentSetup.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ticket_concerns_departments_department_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_concerns_users_modified_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.RequestGenerator", "RequestGenerator")
                        .WithMany("TicketConcerns")
                        .HasForeignKey("RequestGeneratorId")
                        .HasConstraintName("fk_ticket_concerns_request_generators_request_generator_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ReticketByUser")
                        .WithMany()
                        .HasForeignKey("ReticketBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_concerns_users_reticket_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.SubCategorySetup.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ticket_concerns_sub_categories_sub_category_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.SubUnitSetup.SubUnit", "SubUnit")
                        .WithMany()
                        .HasForeignKey("SubUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ticket_concerns_sub_units_sub_unit_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "TransferByUser")
                        .WithMany()
                        .HasForeignKey("TransferBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ticket_concerns_users_transfer_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_ticket_concerns_users_user_id1");

                    b.Navigation("AddedByUser");

                    b.Navigation("ApprovedByUser");

                    b.Navigation("Category");

                    b.Navigation("Channel");

                    b.Navigation("ClosedApproveByUser");

                    b.Navigation("ClosingGenerator");

                    b.Navigation("Department");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("RequestGenerator");

                    b.Navigation("ReticketByUser");

                    b.Navigation("SubCategory");

                    b.Navigation("SubUnit");

                    b.Navigation("TransferByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.TransferTicketConcern", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_transfer_ticket_concerns_users_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.CategorySetup.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transfer_ticket_concerns_categories_category_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.ChannelSetup.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transfer_ticket_concerns_channels_channel_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.DepartmentSetup.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_transfer_ticket_concerns_departments_department_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_transfer_ticket_concerns_users_modified_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "RejectTransferByUser")
                        .WithMany()
                        .HasForeignKey("RejectTransferBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_transfer_ticket_concerns_users_reject_transfer_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.RequestGenerator", "RequestGenerator")
                        .WithMany("TransferTicketConcerns")
                        .HasForeignKey("RequestGeneratorId")
                        .HasConstraintName("fk_transfer_ticket_concerns_request_generators_request_generato");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.SubCategorySetup.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transfer_ticket_concerns_sub_categories_sub_category_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.SubUnitSetup.SubUnit", "SubUnit")
                        .WithMany()
                        .HasForeignKey("SubUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transfer_ticket_concerns_sub_units_sub_unit_id");

                    b.HasOne("MakeItSimple.WebApi.Models.Ticketing.TicketConcern", "TicketConcern")
                        .WithMany()
                        .HasForeignKey("TicketConcernId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transfer_ticket_concerns_ticket_concerns_ticket_concern_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "TransferByUser")
                        .WithMany()
                        .HasForeignKey("TransferBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_transfer_ticket_concerns_users_transfer_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_transfer_ticket_concerns_users_user_id1");

                    b.Navigation("AddedByUser");

                    b.Navigation("Category");

                    b.Navigation("Channel");

                    b.Navigation("Department");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("RejectTransferByUser");

                    b.Navigation("RequestGenerator");

                    b.Navigation("SubCategory");

                    b.Navigation("SubUnit");

                    b.Navigation("TicketConcern");

                    b.Navigation("TransferByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.User", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_users_users_added_by");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.DepartmentSetup.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_users_departments_department_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_users_users_modified_by");

                    b.HasOne("MakeItSimple.WebApi.Models.Setup.SubUnitSetup.SubUnit", "SubUnit")
                        .WithMany("Users")
                        .HasForeignKey("SubUnitId")
                        .HasConstraintName("fk_users_sub_units_sub_unit_id");

                    b.HasOne("MakeItSimple.WebApi.Models.UserManagement.UserRoleAccount.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_user_roles_user_role_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("Department");

                    b.Navigation("ModifiedByUser");

                    b.Navigation("SubUnit");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.UserManagement.UserRoleAccount.UserRole", b =>
                {
                    b.HasOne("MakeItSimple.WebApi.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_user_roles_users_added_by_user_id");

                    b.HasOne("MakeItSimple.WebApi.Models.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_user_roles_users_modified_by_user_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.CategorySetup.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.ChannelSetup.Channel", b =>
                {
                    b.Navigation("ChannelUsers");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.DepartmentSetup.Department", b =>
                {
                    b.Navigation("SubUnits");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Setup.SubUnitSetup.SubUnit", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.ClosingGenerator", b =>
                {
                    b.Navigation("TicketAttachments");

                    b.Navigation("TicketConcerns");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.Ticketing.RequestGenerator", b =>
                {
                    b.Navigation("ApproverTicketings");

                    b.Navigation("TicketAttachments");

                    b.Navigation("TicketConcerns");

                    b.Navigation("TransferTicketConcerns");
                });

            modelBuilder.Entity("MakeItSimple.WebApi.Models.UserManagement.UserRoleAccount.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
